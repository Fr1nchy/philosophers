Réponse aux questions du TD:

Question 1 :
La fonction décrivant le comportement de chaque philosophe est "action_philosopher" dans notre
code. Cette fonction contient une boucle, bouclant jusqu'à que le philosophe ait mangé sa quantité
limite de nouriture (max_food). Dans cette boucle le philosophe va appeler une fonction penser, puis
la fonction prendre fourchette, pour prendre les ressources correspondant aux fourchettes.
Puis la fonction manger et enfin la fonction libérer fourchette pour qu'un autre philosophe
puisse manger à son tour.

Question 2:
Si on utilise N verrous et que chacun des philosophes tente de vérouiller l'accès à une baguettes
alors on peut se retrouver en situation d'interblocage.

Question 3:
Avec la solution implémentant le moniteur, il peut avoir dans certains cas des situations de famine
selon les ordonnancements. De plus, dans cette solution il n'y a pas d'équité entre les threads sur
l'accès aux ressources.Il est possible qu'un philosophe mange plusieurs fois d'affilée avant qu'un thread n'ait pu manger,
ce n'est pas une situation de famine. Mais le problème d'interblocage décrit dans la question précédente
est résolu.

Question 4:
Une situation de famine, c'est lorsque un thread tente d'accéder à une ressource
mais ne l'obtient jamais. Dans notre première version du code, la famine pouvait potentiellement arriver
selon les ordonnancements. Pour résoudre ce problème, chaque philosophe vient comparer le nombre
de fois qu'il a mangé par rapport à ses voisins, s'il a trop mangé il ne vient pas prendre les fourchettes et
laisse la main à une autre philosophe. Cette méthode permet de résoudre le problème de famine et de garantir
l'équité entre les philosophes.
